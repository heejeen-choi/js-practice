/*
 ********************************************************************* 22.11.25.fri (p198~ 226)
 */


//94.경고표시하기
//알림창 표시할때
//동기형식으로 유저에게 메시지를 표시할때
// alert(내용) : 의미=알림창표시 : 반환=없음

//alert()은 메시지내용과 OK 버튼으로 이루어진 알림(경고)창을 표시한다. 창이 닫히기 전까지는 자바스크립트가 실행 중인 상태로 유지되므로 OK버튼을 눌러 창을 닫기 전까지는 다른 작업이나 브라우저의 조작이 불가능하다.알림창 메시지 내용의 줄바꿈은 \n과 템플릿문자열을 사용한다.

const btn = document.querySelector('button');
btn.addEventListener('click', (event) => {
    alert('안녕하세요\n괜찮으신가요');
});


//95.확인창표시하기
//선택창을 표시할때
//동기 형식으로 확인창을 표시할때
//confirm(내용) : 확인창표시 : 반환=진리값

//confirm()은 확인과 취소버튼을 가진 확인창을 표시한다. 확인버튼은 true, 취소버튼은 false를 반환. 주로, 유저에게 확인을 요청할때 confirm() 사용.

const butt = document.querySelector('button');
butt.addEventListener('click', (e) => {
    const isYes = confirm('당신 잘못이 아니예요');
    document.querySelector('.log').innerHTML = isYes;
});


//96.입력프롬프트 표시하기
//유저로부터 문자입력받을때
//동기형식의 작업을 할때
//prompt(내용, 텍스트창의 초기값) : 문자입력창표시 : 반환=문자열

//prompt()는 확인버튼, 취소버튼, 문자입력창을 가진 알림창을 표시한다. 확인버튼을 클릭하면 문자입력창의 문자열이 반환되고, 취소 혹은 x를 누르면 null이 반환.

const text = prompt('마음이 아프신가요?', '여기에 입력해주세요');
console.log(text);


//97.윈도우사이즈확인
//화면을 브라우저 크게에 맞춰 표시할때
//화면 폭에 맞춰 처리작업과 레이아웃을 변경할때

// window.innerWidth : 브라우저 뷰포트의 가로길이



//102.페이지 리로드하기
//게시판 등의 화면을 새로고침할떄
//location.reload(진리값) : 의미=화면새로고침 : 반환=없음
//화면을 새로고침할때 사용하는 메소드. 게시판에서 새글을 확인할때 사용하는 새로고침버튼 등에 사용하거나 웹게임 등의 콘턴츠에서 게임종료되었을때 시작화면으로 전환하는 기능으로도 사용가능. 요청하는 순간 새로고침이 실행되면 브라우저의 새로고침 버튼과 같은 작동을 한다. 전달인수가 없으면 캐시를 사용해서 새로고침이 실행됨.

location.reload();
location.reload(true);
//인수에 true를 전달하면 브라우저의 캐시를 무시하고 새로고침이 실행되며 이는 데이터를 동적으로 표시하는 페이지 등에서 사용된다.



//103.페이지이동하기(앞/뒤로가기)
//브라우저의 뒤로가기 버튼과 같은 동작을 구현할때
// history.back() : 뒤로가기
// history.forward() : 앞으로가기
// history.go(숫자) : 임의의 수만큼 화면이동 : 음수입력=뒤로가기, 양수입력=앞으로가기


//104.해시처리하기 hash(#)
//딥링크를 구현할때
//해시값에 따라 처리를 구분할때
//location.hash : 의미=앵커달기 : 타입=문자
//Anchor앵커 : 하이퍼링크와 같은 의미. 앵커는 페이지 내부의 링크 기능을 하며, 읽기와 쓰기 모두 가능핟.

const hash = location.hash;
console.log(hash);
location.hash = 'app';
//단일페이지 애플리케이션에서 페이지의 계층을 나타내기 위해 앵커를 사용하기도 한다. 단일웹페이지 내에서 여러 화면으로 표시하고싶을때 hash로 기능을 편리하게 구현할수있다. 응용 예로 웹페이지 내에서 앵커를 사용해 스크롤을 조절하는 기능이 가능하다.
//웹페이지 내에서 앵커를 사용해 스크롤을 조절하는 기능도 가능핟. 앵커값이 변경되면 대상 id요소를 확인하고 페이지의 스크롤을 조절하여 원하는 화면을 표시한다.



//104.해시변경확인하기
//해시값이 변경될때마다 작업을 처리하고싶을때
//hashchange : URL의 해시가 변경되었을때
//URL의 #(해시)가 변경될 때마다 작업을 처리할때 window객체의 hashchage이벤트를 확인한다.
// * 해시(#)가 변경되는 타이밍
// (1) 페이지 내 앵커 링크를 클릭할때
// (2) 브라우저의 '뒤로가기', '앞으로가기' 버튼을 눌렀을때
// (3) 유저가 URL의 해시를 변경할때


//106.새윈도우창열기
//현재페이지 그대로 둔채로 새로운 윈도우창 열때
//window.open(URL) : 새로운 창 열기 : 반환=새로운창의 객체

const win = window.open('another.html');
win.focus();


//107.스크롤크기확인하기
//스크롤크기에따라 작업처리해야할때
// window.scrollX : 수평방향스크롤크기
// window.scrollY : 수직방향스크롤크기

const x = window.scrollX;
const y = window.scrollY;
console.log(x, y);


//109.타이틀변경하기
//타이틀을 동적으로 변환할때
//읽지않은 메시지건수를 타이틀바에 표시할때
// document.title : 페이지타이틀 : 타입=문자열
//document.title 속성으로 페이지의 타이틀정보를 가져올수잇으며, 읽기와 쓰기가 모두 가능함.


//112.온/오프라인 대응하기
//오프라인화면에 네트워크의 연결상태표시할때
// navigator.onLine : 네트워크상태가져오기 : 타입=진리값
//반환값이 true이면 네트워크온라인상태. 해당속성은 읽기전용

//접속상태확인
const insOline = navigator.onLine;
if (isOnline === true) {
    console.log('열렸습니다.');
} else {
    console.log('닫혔습니다');
}

window.addEventListener('online', () => {
    console.log('열려있습니다.');
});
window.addEventListener('offline', () => {
    console.log('열리지않습니다.')
});
//window 객체에서 online과 offline이벤트를 감시하면 네트워크의 상태확인이 가능함.


